#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
# ======================================================
#    tksheet7_support.py
#  ------------------------------------------------------
# Created for PAGE and PAGE users.
# Written by G.D. Walters
# Copyright © 2023, 2024, 2025 by G.D. Walters
# This source code is released under the MIT License
# ======================================================
# Creation date 2025-01-26
# ======================================================

# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jan 26, 2025 03:10:19 PM CST  platform: Linux
#    Jan 26, 2025 03:14:27 PM CST  platform: Linux

import sys
import platform
import os
import datetime
import pathlib

# Third Party Libraries
import pandas as pd
from tksheet import Sheet

# Tkinter Libraries
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox
from tkinter import filedialog

import tksheet7

_debug = True  # False to eliminate debug printing from callback functions.
location = tksheet7._location
programName = "PAGE TkSheet 7.3.2 Demo"
version = "0.1.1"


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = tksheet7.Toplevel1(_top1)
    # Creates a toplevel widget.
    global _top26, _w26
    _top26 = tk.Toplevel(root)
    _w26 = tksheet7.FormAbout(_top26)
    startup()
    root.mainloop()


def startup():
    """
        startup function - This function is run just before the program is
    presented to the user.  Use this function to initialize various variables,
    widgets, etc.
    """
    # ===================================================
    # Some default global values
    # ===================================================
    global defaultColumns, defaultRows, useBoldFont, defFont
    defaultColumns = 30
    defaultRows = 50
    useBoldFont = False
    defFont = "Arial"
    # ====================================================================
    #    Setup the list of TkSheet Themes
    # ====================================================================
    sheetThemes = [
        "light blue",
        "light green",
        "dark",
        "black",
        "dark blue",
        "dark green",
    ]
    _w1.TCombobox1["values"] = sheetThemes
    _w1.TCombobox1.bind("<<ComboboxSelected>>", lambda e: on_ComboSelect(e))
    # ====================================================================
    #    Hide the about box
    # ====================================================================
    hide_about()
    # ====================================================================
    #    Setup the Busy cursor (for large datasets)
    # ====================================================================
    global busyCursor, preBusyCursors, busyWidgets
    busyCursor = "watch"
    preBusyCursors = None
    busyWidgets = (root,)
    # ====================================================================
    #    Set up the required information for the Time Display in Status bar
    # ====================================================================
    global timer_id
    timer_id = root.after(0, on_time_update)

    # ====================================================================
    #    Initialize the TkSheet Widget
    # ====================================================================
    global sheet
    # ====================================================================
    #    Set Alternate Row Colours on the sheet
    # ====================================================================
    # sheet.set_options(alternate_color="#E2DAF4")
    global tkSheetTheme
    tkSheetTheme = "light green"
    sheet = Sheet(
        _w1.FrameMain,
        theme="light green",
        font=("Ubuntu", 10, "normal"),
        header_font=("Ubuntu", 10, "bold"),
        # Use these two lines to set alternating line colours in the TkSheet
        # table_bg="khaki2",
        # alternate_color="khaki3",
    )
    # ====================================================================
    #    Set the current TkSheet Theme in the Combobox
    # ====================================================================
    _w1.combobox.set(tkSheetTheme)
    # ====================================================================
    #    Enable bindings
    # ====================================================================
    sheet.enable_bindings("all", "edit_index", "edit_header")
    # ====================================================================
    #    Load the .csv file into the sheet
    # ====================================================================
    insert_data(os.path.join(location, "Datasets", "IMDB Top 250 Movies.csv"))
    # ====================================================================
    #    Finally, place the sheet into the main frame
    # ====================================================================
    sheet.place(x=3, y=3, width=960, height=600)
    # ====================================================================
    #    Now, set the information into the About form message widget
    # ====================================================================
    setup_About()
    # ====================================================================
    #   Last but not least, show the environment information
    # ====================================================================
    show_environ_info()


def setup_About():
    """
    setup_About will load text into the About Form Message widget
    """
    _w26.Message1.configure(justify=CENTER)
    messagestr = f"{programName} - {version}\n\n Copyright © 2020,2025 by DesignatedGeekSoftware and Greg Walters\n\n\nThis program demonstrates how to use the TkSheet third party widget within a PAGE project. "
    _w26.MessageData.set(messagestr)


def on_time_update():
    """
    Callback function for the root.after timer.  Updates the StatusTime label.
    """
    # ======================================================
    # Callback function for the Time display
    # ======================================================
    global timer_id
    nowstring = f"{datetime.datetime.now():%X}"
    _w1.StatusTime.set(nowstring)
    timer_id = root.after(500, on_time_update)


def busyStart(newcursor=None):
    """
    busyStart - switches the current Toplevel Form cursor to 'newcursor'

    Args:
        newcursor (_type_, optional): Cursor to show. Defaults to None.
    """
    global preBusyCursors

    if not newcursor:
        newcursor = busyCursor
    newPreBusyCursors = {}
    for component in busyWidgets:
        newPreBusyCursors[component] = component["cursor"]
        component.configure(cursor=newcursor)
        component.update_idletasks()
    preBusyCursors = (newPreBusyCursors, preBusyCursors)


def busyEnd():
    """
    busyEnd - Restores the "standard" cursor for the form
    """
    global preBusyCursors
    if not preBusyCursors:
        return
    oldPreBusyCursors = preBusyCursors[0]
    preBusyCursors = preBusyCursors[1]
    for component in busyWidgets:
        try:
            component.configure(cursor=oldPreBusyCursors[component])
        except KeyError:
            pass
        component.update_idletasks()


def on_btnAbout(*args):
    """
    on_About - Callback for Main Toplevel About button to show the About Toplevel form.
    """
    if _debug:
        print("tksheet7_support.on_btnAbout")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    show_about()


def on_btnExit(*args):
    """
    on_btnExit - Callback for Main Toplevel Exit button
    """
    if _debug:
        print("tksheet7_support.on_btnExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


def on_ComboSelect(e):
    """
    Callback for the TCombobox.

    Args:
        e (_type_):
    """
    global tkSheetTheme
    selected = _w1.combobox.get()
    print(f"Combobox Select: {selected}")
    sheet.change_theme(selected, True)
    tkSheetTheme = selected
    _w1.combobox.set(tkSheetTheme)


def on_btnLoad(*args):
    """
    on_btnLoad is a callback from the load button that calls the
    Tkinter filedialog.askopenfilename dialog
    """
    global sheet
    if _debug:
        print("tksheet7_support.on_btnLoad")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    print("tksheetdemo1_support.on_btnLoadCSV")
    sys.stdout.flush()
    global headers, progpath
    filename = filedialog.askopenfilename(
        initialdir=location,
        title="Select file",
        filetypes=(("CSV files", "*.csv"), ("all files", "*.*")),
    )
    if len(filename) < 1:
        pass
    else:
        _w1.StatusInfo1.set("")
        _w1.StatusInfo2.set("  Loading Data")
        insert_data(filename)


def insert_data(filename):
    """
    insert_data - loads a dataset into the TkSheet widget

    Args:
        filename (string): fully qualified path to the dataset
    """
    busyStart()
    path = pathlib.Path(filename)
    dataset = path.name
    data = load_csv_file(filename)
    # print(headers)
    sheet.headers(headers)
    # Now load data into sheet
    sheet.set_sheet_data(data)
    # Get the number of rows and columns
    global totalrows, totalcols
    totalrows = sheet.total_rows()
    totalcols = sheet.total_columns()
    # Print the information to the terminal
    print(f"Total Rows: {totalrows}")
    print(f"Total Cols: {totalcols}")
    _w1.StatusInfo2.set("")
    _w1.StatusInfo1.set(f"  Dataset: {dataset}")
    busyEnd()


def load_csv_file(filename):
    """
    load_csv_filename converts the csv file into a pandas dataframe.

    Args:
        filename (string): fully qualified path to the dataset

    Returns:
        _type_: _description_
    """
    global headers
    # convert csv file into a pandas dataframe
    df = pd.read_csv(filename)
    headers = list(df.columns)
    # Convert it into a list
    dl = df.values.tolist()
    # Return it to the calling function
    return dl


def on_btnAboutDismiss(*args):
    """
    Callback for the Dismiss button on the About form
    """
    if _debug:
        print("tksheet7_support.on_btnAboutDismiss")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    hide_about()


def show_environ_info(where="terminal"):
    """
    show_environ_info function will print some useful information for debugging purposes

    Args:
        where (str, optional): Where to print the information. Defaults to "terminal".
    """
    import tkinter as tk

    osVersion = platform.system()
    release = platform.release()
    platformversion = platform.version()
    pv = platform.python_version()
    tkinterver = tk.TkVersion
    tclVer = tk.TclVersion
    tkVer = tk.TkVersion
    patchlevel = root.tk.call("info", "patchlevel")
    if where == "terminal":
        print("=" * 35)
        print(f"Program name: {programName} {version}")
        print(f"System running {osVersion} {release}")
        print(f"Running under Python {pv}")
        print(f"Tkinter Version: {tkinterver}")
        print(f"Tclversion: {tclVer}")
        print(f"Tk Version: {tkVer}")
        print(f"Tcl Patch Level: {patchlevel}")
        print(f"Program path: {location}")
        print("=" * 35)
    else:
        where.insert(END, "\n")
        where.insert(2.0, "=" * 35)
        # print("=" * 35)
        where.insert(END, "\n")
        where.insert(END, f"Program name: {programName} {version}\n")
        where.insert(END, f"System running {osVersion} {release}\n")
        where.insert(END, f"Running under Python {pv}]n")
        where.insert(END, f"Tkinter Version: {tkinterver}\n")
        where.insert(END, f"Tclversion: {tclVer}\n")
        where.insert(END, f"Tk Version: {tkVer}\n")
        where.insert(END, f"Tcl Patch Level: {patchlevel}\n")
        where.insert(END, f"Program path: {location}\n")
        where.insert(END, "=" * 35)


def show_main():
    """
    Show the main Toplevel form from a iconified mode
    """
    global root
    root.deiconify()


def hide_main():
    """
    Forces the main Toplevel form to an iconified state, basically hiding it.
    """
    global root
    root.withdraw()


def show_about():
    """
    Raises the About Toplevel form from an iconified stated.
    """
    global _top26
    _top26.deiconify()
    # centre_screen(1270, 861)


def hide_about():
    """
    Forces the About Toplevel form to an iconified state, basically hiding it.
    """
    global _top26
    _top26.withdraw()


if __name__ == "__main__":
    tksheet7.start_up()
